#!/bin/bash
cd /tmp/rom

# Normal build steps
. build/envsetup.sh
lunch nad_lavender-userdebug
export SELINUX_IGNORE_NEVERALLOWS=true
export _JAVA_OPTIONS="-Xmx12g"
if [ -d "/tmp/ci" ]; then
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G
ccache -o compression=true
ccache -z
else
apt remove ccache
fi

# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
#make api-stubs-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make bacon -j10 & # dont remove that '&'
#sleep 85m
##kill %1
#ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl --retry 18 --upload-file $1 temp.sh
        # 3d, 4000mb limit
}

# It's recommended to use google drive(rclone) as upload solution for coping with the time limit. Un-comment next 3 lines to upload with rclone in drive. Also change apon and junk according to your config name, uploading folder of drive
#up(){
#	time rclone copy $1 apon:junk -P # apon is my rclone config name,
#}

tg () {
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$1&chat_id=${chat_id}"
}

# compile plox
if [ $1 == system ]; then
tg "Building system.img to collect some ccache!"
SECONDS=0
make systemimage -j$(nproc --all) &
sleep 85m
tg "Stopping system.img & preparing for ccache upload!"
kill %1
elif [ $1 == vendor ]; then
tg "Building vendor.img to collect some ccache!"
SECONDS=0
make vendorimage -j$(nproc --all)
elif [ $1 == full ]; then
tg "Building ROM...!"
SECONDS=0
./rom-build.sh lavender -t user -v beta
fi

# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!
if [ $1 == full -a -e out/target/product/*/*2022* ]; then
send_zip=$(up out/target/product/*/*2022*) && tg "Build Succeed! Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
$send_zip"
else
if [ -e out/target/product/*/vendor.img ]; then
mv out/target/product/*/vendor.img ./
7za a -tzip -mx=7 vendor.zip *.img
send_zip=$(up vendor.zip) && tg "Build Succeed! Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
$send_zip"
fi
if [ -e out/target/product/*/system.img ]; then
mv out/target/product/*/system.img out/target/product/*/boot.img ./
7za a -tzip -mx=7 system_boot.zip *.img
send_zip=$(up system_boot.zip) && tg "Build Succeed! Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec
$send_zip"
fi
fi
ccache -s # Let's print ccache statistics finally
