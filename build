#!/bin/bash
cd /tmp/rom

# Normal build steps
. build/envsetup.sh
lunch bliss_lavender-user
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G
ccache -o compression=true
ccache -z

# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
#make api-stubs-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make bacon -j10 & # dont remove that '&'
#sleep 85m
##kill %1
#ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl --upload-file $1 http://oshi.at/nossl
	# 3 days, 5 GB limit
}

# It's recommended to use google drive(rclone) as upload solution for coping with the time limit. Un-comment next 3 lines to upload with rclone in drive. Also change apon and junk according to your config name, uploading folder of drive
#up(){
#	time rclone copy $1 apon:junk -P # apon is my rclone config name,
#}

tg(){
	bot_api=1806738803:1713012266:AAHEMmHMyZ-dxqMU4hQvEv_FHFJBP3UbDro
	your_telegram_id=$1
	msg=$2
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$msg&chat_id=${your_telegram_id}"
}

id=-1001659048493

# compile plox
blissify -v lavender &
sleep 85m
kill %1


# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!
if [ -e out/target/product/lavender/Bliss*.zip ]; then
send_zip=$(up out/target/product/lavender/Bliss*.zip) && tg $id "Build Succeed!
$send_zip"
fi
ccache -s # Let's print ccache statistics finally
